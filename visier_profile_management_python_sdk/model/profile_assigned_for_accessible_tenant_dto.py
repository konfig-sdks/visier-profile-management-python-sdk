# coding: utf-8

"""
    Visier Profile Management APIs

    Visier APIs for managing the profiles assigned to users

    The version of the OpenAPI document: 22222222.99201.1200
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from visier_profile_management_python_sdk import schemas  # noqa: F401


class ProfileAssignedForAccessibleTenantDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            profileId = schemas.StrSchema
            displayName = schemas.StrSchema
            tenantCode = schemas.StrSchema
            forAllChildren = schemas.BoolSchema
            validityStartTime = schemas.StrSchema
            validityEndTime = schemas.StrSchema
            __annotations__ = {
                "profileId": profileId,
                "displayName": displayName,
                "tenantCode": tenantCode,
                "forAllChildren": forAllChildren,
                "validityStartTime": validityStartTime,
                "validityEndTime": validityEndTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileId"]) -> MetaOapg.properties.profileId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantCode"]) -> MetaOapg.properties.tenantCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forAllChildren"]) -> MetaOapg.properties.forAllChildren: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validityStartTime"]) -> MetaOapg.properties.validityStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validityEndTime"]) -> MetaOapg.properties.validityEndTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["profileId", "displayName", "tenantCode", "forAllChildren", "validityStartTime", "validityEndTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileId"]) -> typing.Union[MetaOapg.properties.profileId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantCode"]) -> typing.Union[MetaOapg.properties.tenantCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forAllChildren"]) -> typing.Union[MetaOapg.properties.forAllChildren, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validityStartTime"]) -> typing.Union[MetaOapg.properties.validityStartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validityEndTime"]) -> typing.Union[MetaOapg.properties.validityEndTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["profileId", "displayName", "tenantCode", "forAllChildren", "validityStartTime", "validityEndTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        profileId: typing.Union[MetaOapg.properties.profileId, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        tenantCode: typing.Union[MetaOapg.properties.tenantCode, str, schemas.Unset] = schemas.unset,
        forAllChildren: typing.Union[MetaOapg.properties.forAllChildren, bool, schemas.Unset] = schemas.unset,
        validityStartTime: typing.Union[MetaOapg.properties.validityStartTime, str, schemas.Unset] = schemas.unset,
        validityEndTime: typing.Union[MetaOapg.properties.validityEndTime, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProfileAssignedForAccessibleTenantDTO':
        return super().__new__(
            cls,
            *args,
            profileId=profileId,
            displayName=displayName,
            tenantCode=tenantCode,
            forAllChildren=forAllChildren,
            validityStartTime=validityStartTime,
            validityEndTime=validityEndTime,
            _configuration=_configuration,
            **kwargs,
        )
